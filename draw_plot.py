import json
import pandas as pd
from datetime import datetime, timedelta
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt


# 预测得到的数据，模拟数据，具体结构可根据实际数据进行调整
predicted_data = [
    { "date": "2024-04-01", "values": [ 149, 180, 212, 237, 269, 254, 306, 322, 370, 347, 382, 407, 373, 317, 321, 300, 239, 201, 205, 163, 158, 113, 108, 87 ]},
    { "date": "2024-04-02", "values": [ 139, 183, 180, 200, 271, 288, 312, 298, 336, 362, 400, 355, 330, 340, 296, 296, 262, 201, 207, 184, 147, 126, 107, 77 ] },
    { "date": "2024-04-03", "values": [ 142, 178, 201, 208, 244, 303, 296, 310, 316, 366, 368, 413, 380, 327, 303, 260, 231, 216, 188, 172, 137, 129, 103, 75 ] },
    { "date": "2024-04-04", "values": [ 151, 162, 194, 234, 264, 307, 287, 339, 352, 411, 407, 379, 363, 345, 273, 303, 265, 229, 180, 167, 143, 111, 109, 77 ] },
    { "date": "2024-04-05", "values": [ 147, 171, 189, 211, 264, 281, 292, 339, 359, 367, 414, 347, 367, 348, 303, 278, 246, 208, 201, 177, 161, 119, 92, 80 ]},
    { "date": "2024-04-06", "values": [ 186, 213, 241, 292, 289, 329, 383, 370, 407, 371, 377, 290, 305, 281, 241, 231, 193, 195, 164, 124, 96, 80, 64, 37 ]},
    { "date": "2024-04-07", "values": [ 202, 229, 232, 305, 292, 290, 346, 386, 384, 347, 346, 292, 299, 253, 271, 214, 192, 193, 161, 128, 109, 75, 61, 42 ] },
    { "date": "2024-04-08", "values": [ 147, 179, 191, 200, 226, 283, 282, 311, 344, 410, 375, 343, 334, 336, 313, 269, 239, 224, 218, 165, 142, 113, 105, 84 ]},
    { "date": "2024-04-09", "values": [ 141, 167, 216, 226, 236, 258, 294, 299, 353, 414, 364, 360, 323, 347, 286, 299, 274, 205, 201, 181, 163, 120, 109, 84 ] },
    { "date": "2024-04-10", "values": [ 140, 178, 219, 214, 262, 285, 307, 337, 375, 411, 403, 414, 382, 338, 283, 280, 258, 207, 207, 165, 136, 128, 95, 84 ] },
    { "date": "2024-04-11", "values": [ 154, 180, 218, 202, 250, 296, 275, 322, 319, 395, 375, 381, 347, 325, 272, 253, 248, 208, 189, 187, 157, 110, 103, 87 ] },
    { "date": "2024-04-12", "values": [ 151, 181, 187, 207, 261, 272, 321, 350, 339, 378, 400, 408, 333, 339, 274, 275, 242, 222, 195, 167, 136, 116, 97, 76 ]},
    { "date": "2024-04-13", "values": [ 219, 236, 267, 280, 315, 316, 339, 392, 434, 391, 344, 321, 289, 297, 271, 205, 182, 185, 152, 116, 101, 81, 58, 42 ]},
    { "date": "2024-04-14", "values": [ 181, 207, 242, 294, 287, 305, 377, 385, 418, 403, 384, 295, 310, 280, 263, 239, 204, 177, 146, 121, 101, 85, 57, 41 ] },
    { "date": "2024-04-15", "values": [ 147, 163, 192, 226, 274, 307, 301, 345, 367, 376, 368, 414, 346, 294, 296, 300, 255, 214, 215, 179, 139, 116, 96, 75 ] },
    { "date": "2024-04-16", "values": [ 197, 215, 245, 275, 314, 337, 347, 389, 418, 411, 391, 405, 355, 321, 314, 296, 258, 230, 219, 184, 153, 131, 110, 91 ] },
    { "date": "2024-04-17", "values": [ 150, 162, 194, 234, 264, 317, 287, 339, 352, 411, 407, 379, 363, 345, 273, 303, 265, 229, 180, 167, 143, 111, 109, 77 ] },
    { "date": "2024-04-18", "values": [ 140, 178, 219, 214, 262, 285, 307, 337, 375, 411, 403, 414, 382, 338, 283, 280, 258, 207, 207, 165, 136, 128, 95, 84 ] },
    { "date": "2024-04-19", "values": [ 154, 180, 218, 202, 250, 296, 275, 322, 319, 395, 370, 381, 347, 325, 272, 253, 240, 208, 189, 187, 157, 105, 103, 87 ] },
    { "date": "2024-04-20", "values": [ 202, 229, 232, 305, 292, 290, 346, 386, 384, 347, 346, 292, 299, 253, 271, 214, 192, 193, 161, 128, 109, 75, 61, 42 ] },
    { "date": "2024-04-21", "values": [ 189, 207, 242, 294, 287, 305, 377, 385, 418, 403, 384, 295, 310, 280, 263, 239, 204, 177, 146, 121, 101, 85, 57, 41 ] },
    { "date": "2024-04-22", "values": [ 145, 183, 180, 200, 271, 288, 312, 290, 336, 362, 400, 355, 305, 340, 296, 296, 262, 201, 207, 181, 147, 126, 107, 70 ] },
 

 { "date": "2024-04-23", "values": [ 145, 183, 180, 200, 271, 288, 312, 290, 336, 362, 400, 355, 305, 340, 296, 296, 262, 201, 207, 181, 147, 126, 107, 70 ] },
{ "date":"2024-04-23", "values": [ 139, 183, 180, 200, 271, 288, 312, 298, 336, 362, 400, 355, 330, 340, 296, 296, 262, 201, 207, 184, 147, 126, 107, 77 ] },
{ "date":"2024-04-24", "values": [ 142, 178, 201, 208, 244, 303, 296, 310, 316, 366, 368, 413, 380, 327, 303, 260, 231, 216, 188, 172, 137, 129, 103, 75 ] },
{ "date":"2024-04-25", "values": [ 151, 162, 194, 234, 264, 307, 287, 339, 352, 411, 407, 379, 363, 345, 273, 303, 265, 229, 180, 167, 143, 111, 109, 77 ] },
{ "date":"2024-04-26", "values": [ 147, 171, 189, 211, 264, 281, 292, 339, 359, 367, 414, 347, 367, 348, 303, 278, 246, 208, 201, 177, 161, 119, 92, 80 ]},
{ "date":"2024-04-27", "values": [ 186, 213, 241, 292, 289, 329, 383, 370, 407, 371, 377, 290, 305, 281, 241, 231, 193, 195, 164, 124, 96, 80, 64, 37 ]},
{ "date":"2024-04-28", "values": [ 202, 229, 232, 305, 292, 290, 346, 386, 384, 347, 346, 292, 299, 253, 271, 214, 192, 193, 161, 128, 109, 75, 61, 42 ] },


{ "date": "2024-04-29", "values": [ 111, 162, 208, 249, 285, 319, 347, 369, 382, 386, 380, 366, 343, 314, 280, 244, 208, 175, 146, 125, 112, 108, 114, 129 ] },
{ "date": "2024-04-30", "values": [ 152, 181, 214, 250, 286, 318, 346, 367, 380, 383, 377, 363, 340, 311, 278, 242, 207, 175, 147, 127, 114, 111, 117, 132 ] },
{ "date": "2024-05-01", "values": [ 155, 183, 217, 252, 286, 318, 345, 366, 378, 381, 375, 360, 337, 308, 276, 241, 206, 175, 148, 128, 117, 114, 120, 135 ] },
{ "date": "2024-05-02", "values": [ 157, 186, 218, 253, 287, 318, 344, 364, 375, 378, 372, 357, 334, 306, 274, 239, 206, 175, 149, 130, 119, 116, 123, 138 ] },
{ "date": "2024-05-03", "values": [ 160, 188, 220, 254, 288, 318, 344, 362, 373, 375, 369, 354, 332, 304, 272, 238, 205, 175, 150, 132, 121, 119, 126, 141 ] }
]

# 将历史数据转换为DataFrame
def create_dataframe(data):
    data_list = []
    for entry in data:
        date_str = entry["date"]
        values = entry["values"]
        hours = list(range(24))
        data_list.extend([{'date': datetime.strptime(f"{date_str} {h:02d}:00", '%Y-%m-%d %H:%M'), 'value': v} for h, v in zip(hours, values)])

    df = pd.DataFrame(data_list).set_index('date').sort_index()
    return df

# 构建预测数据的DataFrame
df_predicted = create_dataframe(predicted_data)

# 绘制折线图
def plot_data(df_predicted):
    fig, ax = plt.subplots(figsize=(12, 6))

    # 绘制预测数据
    ax.plot(df_predicted.index, df_predicted['value'], marker='o', linestyle='-', color='r', label='Predicted Data')

    # 设置图例、标题和标签
    ax.legend()
    ax.set_title('Passenger Flow Forecast')
    ax.set_xlabel('Date')
    ax.set_ylabel('Passenger Count')

    # 标记周末
    for date in df_predicted.index:
        if date.weekday() >= 5:
            ax.axvspan(date - timedelta(hours=12), date + timedelta(hours=12), color='gray', alpha=0.2)

    # 显示网格线
    ax.grid(True)

    # 调整布局
    fig.tight_layout()

    # 显示图形
    plt.show()

# 调用函数绘制折线图
plot_data(df_predicted)
